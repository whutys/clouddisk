<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.clouddisk.mapper.UserFileMapper">
    <cache eviction="FIFO" flushInterval="60000" readOnly="false" type="org.mybatis.caches.redis.RedisCache"/>
    <!--type="cn.clouddisk.dao.redis.cache.RedisCache"-->
    <!-- evication:缓存的回收策略：
    LRU - 最近最少使用的：移除最长时间不被使用的对象。
    FIFO - 先进先出：按对象进入缓存的顺序移除它们。
        SOFT - 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象。 默认的是LRU。
        flushInterval：缓存刷新间隔。 缓存多长时间清空一次，默认不清空，设置一个毫秒值。
        readOnly：是否只读 true：只读，MyBatis认为所有从缓存中获取数据都是只读操作，不会修改数据。
        MyBatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。 引用修改，数据也就变了。不安全，速度快。
        false：非只读，mybatis觉得获取的数据可能会被修改。
        MyBatis会利用序列化&反序列化的技术克隆一份新的数据给你。安全，速度慢。 默认是false。
        size：缓存存放多少元素；如size="1024"
        type：指定自定义缓存的全类名；   -->
    <!-- 分页查找所有和搜索文字匹配的文件 -->
    <select id="getAllFiles"
            parameterType="String"
            resultType="cn.clouddisk.entity.UserFile">
        SELECT
            id,
            filename,
            filepath,
            filesize,
            createtime,
            canshare
        FROM file
        WHERE
            canshare = 1 AND filename LIKE '%${searchcontent}%'
    </select>

    <!-- 分页查找某个用户所有的文件 -->
    <!-- <select id="findUserFilesByType" parameterType="java.util.Map" resultType="cn.clouddisk.entity.MyFile">
        SELECT id,filename,filepath,filesize,createtime,canshare FROM file WHERE
        filepath=#{filepath} LIMIT #{startindex},#{pagesize} </select> -->

    <select id="getUserFilesByType" parameterType="java.util.Map"
            resultType="cn.clouddisk.entity.UserFile">
        SELECT * FROM file
        <trim prefix="where" prefixOverrides="and">
            <if test="filepath!=null">AND filepath=#{filepath}</if>
            <if test="types!=null">
                <choose>
                    <when test="others">
                        <foreach collection="types" item="type" open="and("
                                 close=")" separator="and">
                            filename NOT LIKE '%.${type}'
                        </foreach>
                    </when>
                    <otherwise>
                        <foreach collection="types" item="type" open="and("
                                 close=")" separator="or">
                            filename LIKE '%.${type}'
                        </foreach>
                    </otherwise>
                </choose>
            </if>
        </trim>
    </select>

    <!-- 统计一个用户一共多少文件 -->
    <select id="countUserFiles" parameterType="cn.clouddisk.entity.UserFile"
            resultType="int">
        SELECT COUNT(id) totalrecord
        FROM file
        <trim prefix="where" prefixOverrides="and">
            <if test="filename!=null">and filename = #{filename}</if>
            <if test="filepath!=null">and filepath = #{filepath}</if>
        </trim>
    </select>

    <!-- 和搜索内容匹配的所有的共享的文件总数 -->
    <select id="countSharedFile" parameterType="java.lang.String"
            resultType="int">
        SELECT COUNT(id) totalrecord
        FROM file
        WHERE canshare = 1 AND
              filename LIKE
              '%${_parameter}%'
    </select>

    <!-- 根据文件id查找文件 -->
    <select id="getFileById" parameterType="int"
            resultType="UserFile">
        SELECT *
        FROM file
        WHERE id = #{id}
    </select>

    <!-- 把用户上传的文件信息写入数据库 -->
    <insert id="insertUserFile"
            parameterType="cn.clouddisk.entity.UserFile">
        <selectKey keyProperty="id" order="AFTER"
                   resultType="int">
            SELECT last_insert_id()
        </selectKey>
        INSERT INTO file (filename,filepath,filesize,createtime,canshare)
        VALUES(#{filename},#{filepath},#{filesize},#{createtime},#{canshare})
    </insert>
    <!-- 根据文件id更新文件是否共享的标记 -->
    <update id="updateFileById"
            parameterType="cn.clouddisk.entity.UserFile">
        UPDATE FILE
        SET canshare = #{canshare}
        WHERE id = #{id}
    </update>
    <!-- 根据文件id删除文件记录 -->
    <delete id="deleteFileById" parameterType="int">
        DELETE FROM FILE
        WHERE
            id = #{value}
    </delete>

</mapper>